name: Sync Changes to Public Repo - NixOS

on:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  sync-nixos-config:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout private repo (source)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git author
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Generate a short-lived installation token for your GitHub App
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: MSF-OCB
          repositories: org-nixos-config-public

      - name: Define paths
        id: paths
        run: |
          echo "PUB_DIR=${RUNNER_TEMP}/org-nixos-config-public" >> "$GITHUB_OUTPUT"
          echo "STAGE=${RUNNER_TEMP}/stage" >> "$GITHUB_OUTPUT"

      - name: Clone public repo outside the workspace
        run: |
          git clone "https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/MSF-OCB/org-nixos-config-public.git" "${{ steps.paths.outputs.PUB_DIR }}"
          git -C "${{ steps.paths.outputs.PUB_DIR }}" remote -v

      # Export a clean tree from the private repo (no .git)
      - name: Export source tree
        run: |
          mkdir -p "${{ steps.paths.outputs.STAGE }}"
          git archive --format=tar HEAD | tar -x -C "${{ steps.paths.outputs.STAGE }}"

      - name: Sync files to public repo
        run: |
          set -euo pipefail
          RSYNC_ARGS=(-av --delete --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r \
            --exclude '.git/' \
            --exclude '.gitmodules'
          )

          # RSYNC_ARGS+=(--exclude '.github/')

          if [[ -f ".syncignore" ]]; then
            RSYNC_ARGS+=(--exclude-from='.syncignore')
          fi

          rsync "${RSYNC_ARGS[@]}" "${{ steps.paths.outputs.STAGE }}/" "${{ steps.paths.outputs.PUB_DIR }}/"

      - name: Commit & push branch, then create PR (or init repo)
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          set -euo pipefail
          cd "${{ steps.paths.outputs.PUB_DIR }}"

          # Detect default branch of the public repo (falls back to main)
          DEFAULT_BRANCH="$(git remote show origin | sed -n '/HEAD branch/s/.*: //p' || true)"
          [[ -z "${DEFAULT_BRANCH:-}" || "${DEFAULT_BRANCH}" == "(unknown)" ]] && DEFAULT_BRANCH=main

          # Does the default branch exist remotely?
          if git ls-remote --exit-code --heads origin "$DEFAULT_BRANCH" >/dev/null 2>&1; then
            BASE_PRESENT=1
            git fetch origin --prune
            git checkout -B "$DEFAULT_BRANCH" "origin/$DEFAULT_BRANCH"
          else
            BASE_PRESENT=0
            git checkout --orphan "$DEFAULT_BRANCH"
          fi

          # Stage changes from rsync
          if [[ -z "$(git status --porcelain)" ]]; then
            echo "No changes to commit."
            exit 0
          fi

          TIMESTAMP="$(date +'%Y-%m-%d-%H%M%S')"

          if [[ "$BASE_PRESENT" -eq 0 ]]; then
            # Empty repo path: make the initial commit on the default branch (no PR possible yet)
            git add -A
            git commit -m "Initial sync from private repo at ${TIMESTAMP}"
            git push -u origin "$DEFAULT_BRANCH"
            echo "Public repo had no base branch. Pushed initial commit to '$DEFAULT_BRANCH'. Skipping PR."
            exit 0
          fi

          # Normal path: create a feature branch and PR
          BRANCH="sync-update-${TIMESTAMP}"
          git switch -c "$BRANCH"
          git add -A
          git commit -m "Sync: update from private repo at ${TIMESTAMP}"
          git push -u origin "$BRANCH"

          # Create PR against the detected default branch
          gh pr create \
            --repo MSF-OCB/org-nixos-config-public \
            --title "Sync update from private repo (${TIMESTAMP})" \
            --body "This PR contains a synced update from the private repo on ${TIMESTAMP}." \
            --head "$BRANCH" \
            --base "$DEFAULT_BRANCH"
